setwd("~/")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(Seurat)
library(dplyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(cluster)
source("utils/utilFxns.R")
source("utils/plottingFxns.R")
# Load larval zebrafish count matrix
Count.mat <- readRDS("data/ConsolidatedCounts_Zfish_013020.rds")
Count.mat <- readRDS("data/ConsolidatedCounts_LarvaZFish_02032020")
# Remove ZfishRGC17 due to wetting sample failure
cells.remove = grep("ZfishRGC17_",colnames(Count.mat), value=TRUE)
Count.mat = Count.mat[, setdiff(colnames(Count.mat), cells.remove)]
# Create Seurat object, removing genes that are expressed in fewer than 25 cells and removing cells
# that have fewer than 450 features
larva <- CreateSeuratObject(counts = Count.mat, project = "larvaRGC", min.cells = 25, min.features = 450)
larva[["percent.mt"]] <- PercentageFeatureSet(larva, pattern = "^MT-")
larva[["percent.rps"]] <- PercentageFeatureSet(larva, pattern = "^RPS")
larva[["percent.rpl"]] <- PercentageFeatureSet(larva, pattern = "^RPL")
larva[["percent.rp"]] <- larva[["percent.rps"]] + larva[["percent.rpl"]]
# Create Violin Plots of RNA counts, mitochondrial percentages, and ribosomal percentages
VlnPlot(larva, features = "nCount_RNA", pt.size = .3)
VlnPlot(larva, features = "percent.mt", pt.size = .3)
VlnPlot(larva, features = "percent.rp", pt.size = .3)
# Change the order of factor
larva@meta.data$orig.ident = factor(larva@meta.data$orig.ident, levels = paste0("ZfishRGC",c(18:20)))
# Set the batch information in meta.data
batchname = as.character(larva@meta.data$orig.ident)
batchid = rep("Batch0", length(batchname))
batchid[grep("ZfishRGC18", batchname)] = "Batch1"
batchid[grep("ZfishRGC19", batchname)] = "Batch2"
batchid[grep("ZfishRGC20", batchname)] = "Batch3"
larva@meta.data$batch = factor(batchid)
table(larva@meta.data$orig.ident, larva@meta.data$batch)
# Log normalize the data, identify the top 2000 variable features, and scale all genes
larva <- NormalizeData(larva, normalization.method = "LogNormalize", scale.factor = 10000)
all.genes <- rownames(larva)
larva <- ScaleData(larva, features = all.genes)
# Identify and run PCA on variable features and visualize the dimensionality of the dataset using an elbow plot
larva <- FindVariableFeatures(larva, selection.method = "vst", nfeatures = 2000)
larva <- RunPCA(larva, features = VariableFeatures(object = larva))
ElbowPlot(larva, ndims = 50)
# Find nearest neighbors using 30 PCs and cluster the cells. Visualize using tSNE and UMAP
larva <- FindNeighbors(larva, dims = 1:30)
larva <- FindClusters(larva, resolution = .5)
larva <- RunTSNE(larva, dims = 1:30)
larva <- RunUMAP(larva, dims = 1:30)
# Visualize clusters
DimPlot(larva, reduction = "tsne")
DimPlot(larva, reduction =  "umap")
DimPlot(larva, reduction = "tsne", group.by = "orig.ident", cells = sample(colnames(larva)))
VlnPlot(larva,"nFeature_RNA", pt.size=0)
VlnPlot(larva,"RBPMS2B", pt.size=0)
VlnPlot(larva,"nFeature_RNA", pt.size=0)
VlnPlot(larva,"RBPMS2B", pt.size=0)
VlnPlot(larva,"Gpr88", pt.size=0)
#VlnPlot(larva,"Gpr88", pt.size=0)
VlnPlot(larva,"Fam19a4a/b", pt.size=0)
#VlnPlot(larva,"Gpr88", pt.size=0)
#VlnPlot(larva,"Fam19a4a/b", pt.size=0)
VlnPlot(larva,"Calb1", pt.size=0)
VlnPlot(larva,"GPR88", pt.size=0)
VlnPlot(larva,"FAM19A4A/B", pt.size=0)
View(larva)
larva@meta.data[["nFeature_RNA"]]
VlnPlot(larva,"Calb1", pt.size=0)
VlnPlot(larva,"Spp1", pt.size=0)
VlnPlot(larva,"Jam2a/b", pt.size=0)
VlnPlot(larva,"nFeature_RNA", pt.size=0)
VlnPlot(larva,"RBPMS2B", pt.size=0)
#VlnPlot(larva,"GPR88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"Calb1", pt.size=0)
#VlnPlot(larva,"Spp1", pt.size=0)
#VlnPlot(larva,"Jam2a/b", pt.size=0)
# 17 - Amacrine cell (TFAP2B)
markers17=FindMarkers(larva, ident.1 = 17, test.use="MAST", max.cells.per.ident = 1000)
nstall.packages("BiocManager") # Needed to install all Bioconductor packages
BiocManager::install("MAST")
# 17 - Amacrine cell (TFAP2B)
markers17=FindMarkers(larva, ident.1 = 17, test.use="MAST", max.cells.per.ident = 1000)
install.packages("BiocManager") # Needed to install all Bioconductor pack
install.packages("BiocManager")
# 17 - Amacrine cell (TFAP2B)
markers17=FindMarkers(larva, ident.1 = 17, test.use="MAST", max.cells.per.ident = 1000)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(Seurat)
library(dplyr)
library(reshape2)
library(ggplot2)
library(cowplot)
library(cluster)
source("utils/utilFxns.R")
source("utils/plottingFxns.R")
# Load larval zebrafish count matrix
Count.mat <- readRDS("data/ConsolidatedCounts_Zfish_013020.rds")
Count.mat <- readRDS("data/ConsolidatedCounts_LarvaZFish_02032020")
# Remove ZfishRGC17 due to wetting sample failure
cells.remove = grep("ZfishRGC17_",colnames(Count.mat), value=TRUE)
Count.mat = Count.mat[, setdiff(colnames(Count.mat), cells.remove)]
# Create Seurat object, removing genes that are expressed in fewer than 25 cells and removing cells
# that have fewer than 450 features
larva <- CreateSeuratObject(counts = Count.mat, project = "larvaRGC", min.cells = 25, min.features = 450)
larva[["percent.mt"]] <- PercentageFeatureSet(larva, pattern = "^MT-")
larva[["percent.rps"]] <- PercentageFeatureSet(larva, pattern = "^RPS")
larva[["percent.rpl"]] <- PercentageFeatureSet(larva, pattern = "^RPL")
larva[["percent.rp"]] <- larva[["percent.rps"]] + larva[["percent.rpl"]]
# Create Violin Plots of RNA counts, mitochondrial percentages, and ribosomal percentages
VlnPlot(larva, features = "nCount_RNA", pt.size = .3)
VlnPlot(larva, features = "percent.mt", pt.size = .3)
VlnPlot(larva, features = "percent.rp", pt.size = .3)
# Change the order of factor
larva@meta.data$orig.ident = factor(larva@meta.data$orig.ident, levels = paste0("ZfishRGC",c(18:20)))
# Set the batch information in meta.data
batchname = as.character(larva@meta.data$orig.ident)
batchid = rep("Batch0", length(batchname))
batchid[grep("ZfishRGC18", batchname)] = "Batch1"
batchid[grep("ZfishRGC19", batchname)] = "Batch2"
batchid[grep("ZfishRGC20", batchname)] = "Batch3"
larva@meta.data$batch = factor(batchid)
table(larva@meta.data$orig.ident, larva@meta.data$batch)
# Log normalize the data, identify the top 2000 variable features, and scale all genes
larva <- NormalizeData(larva, normalization.method = "LogNormalize", scale.factor = 10000)
all.genes <- rownames(larva)
larva <- ScaleData(larva, features = all.genes)
# Identify and run PCA on variable features and visualize the dimensionality of the dataset using an elbow plot
larva <- FindVariableFeatures(larva, selection.method = "vst", nfeatures = 2000)
larva <- RunPCA(larva, features = VariableFeatures(object = larva))
ElbowPlot(larva, ndims = 50)
# Find nearest neighbors using 30 PCs and cluster the cells. Visualize using tSNE and UMAP
larva <- FindNeighbors(larva, dims = 1:30)
larva <- FindClusters(larva, resolution = .5)
larva <- RunTSNE(larva, dims = 1:30)
larva <- RunUMAP(larva, dims = 1:30)
# Visualize clusters
DimPlot(larva, reduction = "tsne")
DimPlot(larva, reduction =  "umap")
head(all.genes)
Check for batch effects within the data by grouping the tSNE plot by batch.
head(all.genes)
#Check for batch effects within the data by grouping the tSNE plot by batch.
features_zf<- c("Gpr88","Fam19a4a/b","Calb1","Calb2a/b",
"Satb2","Mmp17a/b")
#Check for batch effects within the data by grouping the tSNE plot by batch.
features_ay<- c("Gpr88","Fam19a4a/b","Calb1","Calb2a/b",
"Satb2","Mmp17a/b")
feat<-toupper(features_ay)
which(feat in all.genes)
which(feat %in% all.genes)
grep(feat %in% all.genes)
match(feat %in% all.genes)
DimPlot(larva, reduction = "tsne", group.by = "orig.ident", cells = sample(colnames(larva)))
VlnPlot(larva,"nFeature_RNA", pt.size=0)
VlnPlot(larva,"RBPMS2B", pt.size=0)
#VlnPlot(larva,"GPR88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"Calb1", pt.size=0)
#VlnPlot(larva,"Spp1", pt.size=0)
#VlnPlot(larva,"Jam2a/b", pt.size=0)
# 17 - Amacrine cell (TFAP2B)
markers17=FindMarkers(larva, ident.1 = 17, test.use="MAST", max.cells.per.ident = 1000)
# 21 - Amacrine cell (GAD1B, GAD2, SLC6A1B)
markers21=FindMarkers(larva, ident.1 = 21, test.use="MAST", max.cells.per.ident = 1000)
# 22 - Photoreceptor (PDE6G, SAGB)
markers22=FindMarkers(larva, ident.1 = 22, test.use="MAST", max.cells.per.ident = 1000)
# 23 - Photoreceptor (PDE6H, ARR3A, RBP4L)
markers23=FindMarkers(larva, ident.1 = 23, test.use="MAST", max.cells.per.ident = 1000)
cells.remove = WhichCells(larva, idents= c(17, 21, 22, 23))
larva = SubsetData(larva,cells = setdiff(colnames(larva), cells.remove))
larva <- NormalizeData(larva, normalization.method = "LogNormalize", scale.factor = 10000)
larva <- FindVariableFeatures(larva, selection.method = "vst", nfeatures = 2000)
larva <- ScaleData(larva, verbose = FALSE)
larva <- RunPCA(larva, npcs = 40, verbose = FALSE)
larva <- FindNeighbors(larva, dims = 1:40)
larva <- FindClusters(larva)
larva <- RunUMAP(larva, reduction = "pca", dims = 1:40)
larva <- RunTSNE(larva, reduction = "pca", dims = 1:40)
lar.markers <- FindAllMarkers(larva, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
lar.markers %>% group_by(cluster) %>% top_n(n = 1, wt = avg_logFC)
# Cluster 5: Lacks of unique differentially expressed genes
head(subset(lar.markers, cluster == 5))
# Cluster 28: Muller Glia (RLBP1A, APOEB)
VlnPlot(larva, "RLBP1A", pt.size = 0)
# Remove clusters
Idents(larva) <- "RNA_snn_res.0.8"
cells.remove = WhichCells(larva, idents= c(5, 28))
larva = SubsetData(larva ,cells = setdiff(colnames(larva), cells.remove))
# Set final cluster assignments
larva@meta.data$clusterID = droplevels(Idents(larva))
levels(larva@meta.data$clusterID) = 1:length(levels(larva@meta.data$clusterID))
Idents(larva) <- "clusterID"
feat[5]
# Cluster 5: Lacks of unique differentially expressed genes
head(subset(lar.markers, cluster == 5))
# Cluster 28: Muller Glia (RLBP1A, APOEB)
VlnPlot(larva, "RLBP1A", pt.size = 0)
#DSRGC???
VlnPlot(larva, "SATB2", pt.size = 0)
# Remove clusters
Idents(larva) <- "RNA_snn_res.0.8"
cells.remove = WhichCells(larva, idents= c(5, 28))
# Build dendrogram
Idents(larva) <- "clusterID"
larva <- FindVariableFeatures(larva, selection.method = "vst", nfeatures = 500)
larva <- BuildClusterTree(larva)
# Visualize the dendrogram
PlotClusterTree(larva)
plot(larva@tools$BuildClusterTree)
# Reorder clusters according to dendrogram for dotplot plotting
tree_obj = larva@tools$BuildClusterTree
left_clusts = Seurat:::GetLeftDescendants(tree_obj, length(levels(larva@meta.data$clusterID))+1)
right_clusts = Seurat:::GetRightDescendants(tree_obj, length(levels(larva@meta.data$clusterID))+1)
clust_order = c(left_clusts, right_clusts)
larva@meta.data$dendro_order = factor(larva@meta.data$clusterID, levels = clust_order)
Idents(larva) <- "dendro_order"
lar.markers <- FindAllMarkers(larva, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
VlnPlot(larva,"GRP88", pt.size=0)
#VlnPlot(larva,"GRP88", pt.size=0)
VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"GRP88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
VlnPlot(larva,"CALB1", pt.size=0)
#VlnPlot(larva,"GRP88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"CALB1", pt.size=0)
VlnPlot(larva,"COL25A1", pt.size=0)
#VlnPlot(larva,"GRP88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"CALB1", pt.size=0)
#VlnPlot(larva,"COL25A1", pt.size=0)
VlnPlot(larva,"CDH6", pt.size=0)
VlnPlot(larva,"CARTPT", pt.size=0)
VlnPlot(larva,"KRT1-C5", pt.size=0)
#VlnPlot(larva,"GRP88", pt.size=0)
#VlnPlot(larva,"FAM19A4A/B", pt.size=0)
#VlnPlot(larva,"CALB1", pt.size=0)
#VlnPlot(larva,"COL25A1", pt.size=0)
VlnPlot(larva,"CDH6", pt.size=0)
VlnPlot(larva,"CARTPT", pt.size=0)
#VlnPlot(larva,"KRT1-C5", pt.size=0)
VlnPlot(larva,"TGFB3", pt.size=0)
VlnPlot(larva,"DFNB31B", pt.size=0)
#Nega
VlnPlot(larva,"SPP!", pt.size=0)
#Nega
#VlnPlot(larva,"SPP!", pt.size=0)
VlnPlot(larva,"JAM2A/B", pt.size=0)
#Nega
#VlnPlot(larva,"SPP!", pt.size=0)
#VlnPlot(larva,"JAM2A/B", pt.size=0)
VlnPlot(larva,"TBR1A/B", pt.size=0)
#Nega
#VlnPlot(larva,"SPP!", pt.size=0)
#VlnPlot(larva,"JAM2A/B", pt.size=0)
#VlnPlot(larva,"TBR1A/B", pt.size=0)
VlnPlot(larva,"FOXP2", pt.size=0)
VlnPlot(larva,"EOMESA/B", pt.size=0)
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
# Plot immature and mature markers
DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
DotPlot(larva, features = tolower(features_ay) + RotatedAxis()
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = feat) + RotatedAxis()
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
DotPlot(larva, features = tolower(features_ay) + RotatedAxis()
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = feat) + RotatedAxis()
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
DotPlot(larva, features = tolower(features_ay) + RotatedAxis())
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
#DotPlot(larva, features = tolower(features_ay) + RotatedAxis())
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = feat) + RotatedAxis()
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
#DotPlot(larva, features = tolower(features_ay) + RotatedAxis())
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = features_ay) + RotatedAxis()
features_ay<- c("tgfb3","dfnb31b","cdh6","Satb2")
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
#DotPlot(larva, features = tolower(features_ay) + RotatedAxis())
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = features_ay) + RotatedAxis()
features_ay<- c("tgfb3","dfnb31b","cdh6","Satb2","foxp2")
# Convert gene names to lowercase
larva <- LowerCase_genes(larva)
# Plot canonical RGC markers
#DotPlot(larva, features = tolower(c("ROBO2", "ISL2B", "RBPMS2B"))) + RotatedAxis()
#DotPlot(larva, features = tolower(features_ay) + RotatedAxis())
# Plot immature and mature markers
#DotPlot(larva, features = c("aldocb","bhlhe41","fam107b","bhlhe40","tmsb","alcamb","tubb5","fam60al")) + RotatedAxis()
DotPlot(larva, features = features_ay) + RotatedAxis()
# Extract top 3 DE genes from each cluster for plotting
DEGenes_vector <- vector()
for(i in levels(Idents(larva))){
DEGenes_vector = union(DEGenes_vector, head(subset(lar.markers, cluster==i))[1:3,]$gene)
}
DEGenes_vector = tolower(DEGenes_vector[2:length(DEGenes_vector)])
larva <- LowerCase_genes(larva)
# Plot DE genes
DotPlot(larva, features = DEGenes_vector) + RotatedAxis()
# Extract top 3 DE genes from each cluster for plotting
DEGenes_vector <- vector()
for(i in levels(Idents(larva))){
DEGenes_vector = union(DEGenes_vector, head(subset(lar.markers, cluster==i))[1:3,]$gene)
}
DEGenes_vector = tolower(DEGenes_vector[2:length(DEGenes_vector)])
larva <- LowerCase_genes(larva)
# Plot DE genes
DotPlot(larva, features = DEGenes_vector) + RotatedAxis()
#plot ayjan
DotPlot(larva, features = features_ay) + RotatedAxis()
# Split larva into immature cells
immature_clusts = c("1","2","3","5","13","20")
immature_cells <- WhichCells(larva, idents =immature_clusts)
# Create new Seurat object for immature cells. ClusterSeurat is a shortcut function that goes through the normal workflow.
immature <- CreateSeuratObject(Count.mat[,immature_cells])
immature <- ClusterSeurat(immature)
# Import cluster ID from full larva object
immature@meta.data$orig_ID <- 0
immature@meta.data[immature_cells,]$orig_ID = as.numeric(larva@meta.data[immature_cells,]$clusterID)
levels(immature@meta.data$orig_ID) <- as.numeric(immature_clusts)
Idents(immature) <- "orig_ID"
# Subset larva object
mature_clusts = setdiff(levels(larva@meta.data$clusterID), immature_clusts)
mature_cells <- WhichCells(larva, idents = mature_clusts)
# Create separate object
mature <- CreateSeuratObject(Count.mat[,mature_cells])
mature <- ClusterSeurat(mature)
# Import cluster IDs from full larval object
mature@meta.data$orig_ID <- 0
mature@meta.data[mature_cells,]$orig_ID <- as.numeric(larva@meta.data[mature_cells,]$clusterID)
levels(mature@meta.data$orig_ID) <- as.numeric(mature_clusts)
Idents(mature) <- "orig_ID"
DimPlot(immature, reduction = "tsne", group.by = "orig_ID")
DimPlot(mature, reduction = "tsne", group.by = "orig_ID")
save.image("~/testdir/ZebrafishRGC/DSRGC_December23/Untitled.RData")
View(larva)
rm(list=ls())
c<-0.15
d<-0.6*0.4*0.3*0.7
r<-c/d
r<-c*c/d
10000/260
rmarkdown::render("input.Rmd")
install.packages("bookdown")
data23<-read.csv(url, sep = '\t',header = TRUE)
url<-"/Users/kaisar_dauyey/Desktop/Project_OIST/dropbox_nov23/ocean_acidification_TE/TE_expression/family_id.allTE_sameFam/TEtranscript.all_samples.family_id.allTE_sameFam.tpm.txt"
data23<-read.csv(url, sep = '\t',header = TRUE)
View(data23)
#data1<-read.delim("/Users/kaisar_dauyey/Desktop/Project_OIST/dropbox_nov23/ocean_acidification_TE/TE_expression/family_id.allTE_sameFam/TEtranscript.family_id.allTE_sameFam.merged_rep_treatment-phenotype.tpm.txt", stringsAsFactors = F, header = T)
data2<-read.delim("/Users/kaisar_dauyey/Desktop/Project_OIST/dropbox_nov23/ocean_acidification_TE/TE_expression/family_id.allTE_sameFam/TEtranscript.all_samples.family_id.allTE_sameFam.tpm.txt")
setwd("/Users/kaisar_dauyey/testdir/savage/12k_work")
library(biomaRt)
library(ggplot2)
library(dplyr)
library(viridis)
library(janitor)
data_ref<- read.csv("12k_snp_alleles.csv")
data_anc<- read.csv("snps_11627_ancestry_hg38.csv")
setwd("/Ancient_intelligence/")
setwd("Ancient_intelligence/")
data_ref<- read.csv("12k_snp_alleles.csv")
data_anc<- read.csv("snps_11627_ancestry_hg38.csv")
data_ref<- read.csv("data/12k_snp_alleles.csv")
data_anc<- read.csv("data/snps_11627_ancestry_hg38.csv")
data_ref<- read.csv("/data/12k_snp_alleles.csv")
data_anc<- read.csv("/data/snps_11627_ancestry_hg38.csv")
data_ref<- read.csv("/data12k_snp_alleles.csv")
setwd("Ancient_intelligence/")
setwd("/Ancient_intelligence/")
Ancient_intelligence
setwd("~/Ancient_intelligence")
data_ref<- read.csv("/data12k_snp_alleles.csv")
data_ref<- read.csv("/data/12k_snp_alleles.csv")
data_ref<- read.csv("data/12k_snp_alleles.csv")
data_anc<- read.csv("data/snps_11627_ancestry_hg38.csv")
data_ref$Effect_allele = toupper(data_ref$Effect_allele)
#no need to allign - do merge by matching SNPs
is.null(data_anc)
#merge by match...
data_merged<-merge(x = data_ref, y = data_anc,
by.x = "SNP", by.y = "refsnp_id")
head(data_merged)
dim(data_merged)
#checkNA
sum(is.na(data_merged$allele_1))
#all alleles
sum_all<-data.frame(table(data_merged$Effect_allele == data_merged$allele_1))
sum_all[1] <- lapply(sum_all[1], as.character)
sum_all <- rbind(sum_all, c(sum(sum_all$Freq)))
d1<-c("Derived", "Ancestral", "Total")
sum_all<-cbind(sum_all,d1)
head(sum_all)
#subset all +
data_pos<-data_merged[data_merged$Zscore>0,]
head(data_pos)
#subset all -
data_neg<-data_merged[!data_merged$Zscore>0,]
head(data_neg)
#counter +
sum_pos<-as.data.frame(table(data_pos$Effect_allele == data_pos$allele_1))
sum_pos[1] <- lapply(sum_pos[1], as.character)
sum_pos <- rbind(sum_pos, c(sum(sum_pos$Freq)))
sum_pos<-cbind(sum_pos,d1)
head(sum_pos)
#counter -
sum_neg<-as.data.frame(table(data_neg$Effect_allele == data_neg$allele_1))
sum_neg[1] <- lapply(sum_neg[1], as.character)
sum_neg <- rbind(sum_neg, c(sum(sum_neg$Freq)))
sum_neg<-cbind(sum_neg,d1)
head(sum_neg)
counts<-bind_rows(sum_all,sum_pos,sum_neg)
dim_desc(counts)
counts
allele <- c(rep("Absolute count" , 3) , rep("Positive" , 3) , rep("Negative" , 3) )
data_test <- data.frame(counts,allele)
data_test$Var1
(data_test$Var1,data_test$Freq)
[data_test$Var1,data_test$Freq]
[data_test$Var1;data_test$Freq]
View(sum_pos)
View(sum_all)
View(sum_all)
View(data_test)
data_test[5,2]
testor <-rbind(c(data_test[5,2],data_test[4,2]),c(data_test[8,2],data_test[7,2]))
#testor <-rbind(c(2542,3333),c(2490,3262))
testor
fisher.test(testor)
ju<-fisher.test(testor)
ju
ju$conf.int
mean(ju$conf.int)
11627/12037
